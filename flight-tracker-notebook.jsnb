{
  "metadata": {
    "name": "Flight Tracker Data Processing",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align:center;background-color:#2E86AB;color:#EEE;margin:-10px;margin-left:-20px;margin-right:-20px;padding:20px;\">\n<h1 style=\"color:#EEE\">Flight Tracker Data Processing</h1>\n<p style=\"color:#EEE\">Interactive notebook for tracking flights between airports using OpenSky Network API</p>\n</div>",
      "status": "",
      "output": "<div style=\"text-align:center;background-color:#2E86AB;color:#EEE;margin:-10px;margin-left:-20px;margin-right:-20px;padding:20px;\">\n<h1 style=\"color:#EEE\">Flight Tracker Data Processing</h1>\n<p style=\"color:#EEE\">Interactive notebook for tracking flights between airports using OpenSky Network API</p>\n</div>",
      "type": "html"
    },
    {
      "code": "## About This Notebook\n\nThis notebook demonstrates how to:\n- Load airport data from CSV\n- Search for flights between airports\n- Match departure and arrival records\n- Fetch detailed flight track data\n- Analyze flight patterns\n- Visualize flight paths on interactive maps\n\n**Note:** The OpenSky Network API provides historical flight data (previous days only).",
      "status": "",
      "output": "<h2>About This Notebook</h2>\n<p>This notebook demonstrates how to:</p>\n<ul>\n<li>Load airport data from CSV</li>\n<li>Search for flights between airports</li>\n<li>Match departure and arrival records</li>\n<li>Fetch detailed flight track data</li>\n<li>Analyze flight patterns</li>\n<li>Visualize flight paths on interactive maps</li>\n</ul>\n<p><strong>Note:</strong> The OpenSky Network API provides historical flight data (previous days only).</p>\n",
      "type": "html"
    },
    {
      "code": "### Step 1: Configuration and Helper Functions",
      "status": "",
      "output": "<h3>Step 1: Configuration and Helper Functions</h3>\n",
      "type": "html"
    },
    {
      "code": "// Configuration - store in window for access across cells\nwindow.AIRPORTS_CSV_URL = 'https://raw.githubusercontent.com/ip2location/ip2location-iata-icao/refs/heads/master/iata-icao.csv';\n\n// Helper function to parse CSV - store in window\nwindow.parseAirportCsv = function(csvText) {\n    const lines = csvText.split('\\n');\n    const airports = [];\n    \n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n\n        const parts = [];\n        let currentPart = '';\n        let inQuotes = false;\n        \n        for (let char of line) {\n            if (char === '\"') {\n                inQuotes = !inQuotes;\n            } else if (char === ',' && !inQuotes) {\n                parts.push(currentPart);\n                currentPart = '';\n            } else {\n                currentPart += char;\n            }\n        }\n        parts.push(currentPart);\n\n        if (parts.length >= 5) {\n            const countryCode = parts[0].trim();\n            const regionName = parts[1].trim();\n            const icao = parts[3].trim();\n            const airportName = parts[4].trim();\n            \n            if (icao && airportName && icao.toLowerCase() !== 'icao') {\n                airports.push({ icao, name: airportName, country: countryCode, region: regionName });\n            }\n        }\n    }\n    return airports;\n}\n\nscrib.show(\"‚úÖ Helper functions loaded successfully\")",
      "status": "[18]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "‚úÖ Helper functions loaded successfully <br>",
      "type": "code"
    },
    {
      "code": "### Step 2: Load Airport Data",
      "status": "",
      "output": "<h3>Step 2: Load Airport Data</h3>\n",
      "type": "html"
    },
    {
      "code": "// Fetch and parse airport data - store in window\nwindow.airports = [];\n\ntry {\n    scrib.show(\"üîÑ Loading airport data...\")\n    const response = await fetch(window.AIRPORTS_CSV_URL);\n    if (!response.ok) {\n        throw new Error(`Failed to fetch airport data: ${response.status}`);\n    }\n    \n    const csvText = await response.text();\n    window.airports = window.parseAirportCsv(csvText);\n    \n    scrib.show(`‚úÖ Loaded ${window.airports.length} airports`);\n    \n    // Show sample airports\n    scrib.show(\"\\nüìç Sample airports:\");\n    const sampleAirports = window.airports.slice(0, 5).map(a => \n        `${a.icao} - ${a.name} (${a.region}, ${a.country})`\n    );\n    sampleAirports.forEach(a => scrib.show(`   ‚Ä¢ ${a}`));\n    \n} catch (error) {\n    scrib.show(`‚ùå Error loading airports: ${error.message}`);\n}",
      "status": "[19]<br><span style=\"font-size:8px\">40ms<span></span></span>",
      "output": "üîÑ Loading airport data... <br>‚úÖ Loaded 7896 airports <br>\nüìç Sample airports: <br>   ‚Ä¢ OMAL - Al Ain International Airport (Abu Zaby, AE) <br>   ‚Ä¢ OMAA - Abu Dhabi International Airport (Abu Zaby, AE) <br>   ‚Ä¢ OMAD - Al Bateen Executive Airport (Abu Zaby, AE) <br>   ‚Ä¢ OMAM - Al Dhafra Air Base (Abu Zaby, AE) <br>   ‚Ä¢ OMBY - Sir Bani Yas Airport (Abu Zaby, AE) <br>",
      "type": "code"
    },
    {
      "code": "### Step 3: Set Flight Search Parameters",
      "status": "",
      "output": "<h3>Step 3: Set Flight Search Parameters</h3>\n",
      "type": "html"
    },
    {
      "code": "// Set search parameters - adjust dates to recent past\nwindow.searchParams = {\n    departureAirport: 'VABB',  // Mumbai Airport\n    arrivalAirport: 'VOBL',    // Bengaluru Airport  \n    beginDate: '2025-06-10',   // Adjust to a recent past date\n    endDate: '2025-06-11'      // Maximum 7 days range\n};\n\n// Convert dates to timestamps\nwindow.beginTimestamp = Math.floor(new Date(window.searchParams.beginDate + \"T00:00:00Z\").getTime() / 1000);\nwindow.endTimestamp = Math.floor(new Date(window.searchParams.endDate + \"T23:59:59Z\").getTime() / 1000);\n\n// Validate date range\nconst sevenDaysInSeconds = 7 * 24 * 60 * 60;\nconst dateRangeDays = (window.endTimestamp - window.beginTimestamp) / (24 * 60 * 60);\n\nscrib.show(\"üîç Search Parameters:\");\nscrib.show(`   ‚Ä¢ Route: ${window.searchParams.departureAirport} ‚Üí ${window.searchParams.arrivalAirport}`);\nscrib.show(`   ‚Ä¢ Date range: ${window.searchParams.beginDate} to ${window.searchParams.endDate} (${dateRangeDays} days)`);\nscrib.show(`   ‚Ä¢ Timestamps: ${window.beginTimestamp} to ${window.endTimestamp}`);\n\nif ((window.endTimestamp - window.beginTimestamp) > sevenDaysInSeconds) {\n    scrib.show('‚ùå Date range exceeds 7 days!');\n} else {\n    scrib.show('‚úÖ Date range is valid');\n}",
      "status": "[20]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "üîç Search Parameters: <br>   ‚Ä¢ Route: VABB ‚Üí VOBL <br>   ‚Ä¢ Date range: 2025-06-10 to 2025-06-11 (1.999988425925926 days) <br>   ‚Ä¢ Timestamps: 1749513600 to 1749686399 <br>‚úÖ Date range is valid <br>",
      "type": "code"
    },
    {
      "code": "### Step 4: Fetch Departure Flights",
      "status": "",
      "output": "<h3>Step 4: Fetch Departure Flights</h3>\n",
      "type": "html"
    },
    {
      "code": "// Fetch departure flights - store in window\nwindow.departureFlights = [];\n\nconst departureApiUrl = `https://opensky-network.org/api/flights/departure?airport=${window.searchParams.departureAirport}&begin=${window.beginTimestamp}&end=${window.endTimestamp}`;\n\ntry {\n    scrib.show(`\\nüõ´ Fetching departure flights from ${window.searchParams.departureAirport}...`);\n    const response = await fetch(departureApiUrl);\n    \n    if (response.status === 404) {\n        scrib.show(`‚ö†Ô∏è No departure flights found for ${window.searchParams.departureAirport}`);\n    } else if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n    } else {\n        window.departureFlights = await response.json();\n        scrib.show(`‚úÖ Found ${window.departureFlights.length} departure flights`);\n        \n        // Show sample departure flights\n        if (window.departureFlights.length > 0) {\n            scrib.show(\"\\nüìã Sample departures:\");\n            window.departureFlights.slice(0, 3).forEach((f, i) => {\n                const depTime = new Date(f.firstSeen * 1000).toLocaleString();\n                scrib.show(`   ${i+1}. ${f.callsign || 'N/A'} (${f.icao24})`);\n                scrib.show(`      Departed: ${depTime}`);\n                scrib.show(`      Est. Arrival: ${f.estArrivalAirport || 'Unknown'}`);\n            });\n        }\n    }\n} catch (error) {\n    scrib.show(`‚ùå Error fetching departures: ${error.message}`);\n}",
      "status": "[21]<br><span style=\"font-size:8px\">1.357s<span></span></span>",
      "output": "\nüõ´ Fetching departure flights from VABB... <br>‚úÖ Found 539 departure flights <br>\nüìã Sample departures: <br>   1. IGO136   (8014ce) <br>      Departed: 6/12/2025, 3:09:20 AM <br>      Est. Arrival: VOMM <br>   2. IGO6045  (801798) <br>      Departed: 6/12/2025, 2:54:07 AM <br>      Est. Arrival: VIDP <br>   3. AXB1146  (800ce4) <br>      Departed: 6/12/2025, 2:29:01 AM <br>      Est. Arrival: VIDP <br>",
      "type": "code"
    },
    {
      "code": "### Step 5: Fetch Arrival Flights",
      "status": "",
      "output": "<h3>Step 5: Fetch Arrival Flights</h3>\n",
      "type": "html"
    },
    {
      "code": "// Fetch arrival flights - store in window\nwindow.arrivalFlights = [];\n\nconst arrivalApiUrl = `https://opensky-network.org/api/flights/arrival?airport=${window.searchParams.arrivalAirport}&begin=${window.beginTimestamp}&end=${window.endTimestamp}`;\n\ntry {\n    scrib.show(`\\nüõ¨ Fetching arrival flights at ${window.searchParams.arrivalAirport}...`);\n    const response = await fetch(arrivalApiUrl);\n    \n    if (response.status === 404) {\n        scrib.show(`‚ö†Ô∏è No arrival flights found for ${window.searchParams.arrivalAirport}`);\n    } else if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n    } else {\n        window.arrivalFlights = await response.json();\n        scrib.show(`‚úÖ Found ${window.arrivalFlights.length} arrival flights`);\n        \n        // Show sample arrival flights\n        if (window.arrivalFlights.length > 0) {\n            scrib.show(\"\\nüìã Sample arrivals:\");\n            window.arrivalFlights.slice(0, 3).forEach((f, i) => {\n                const arrTime = new Date(f.lastSeen * 1000).toLocaleString();\n                scrib.show(`   ${i+1}. ${f.callsign || 'N/A'} (${f.icao24})`);\n                scrib.show(`      Arrived: ${arrTime}`);\n                scrib.show(`      From: ${f.estDepartureAirport || 'Unknown'}`);\n            });\n        }\n    }\n} catch (error) {\n    scrib.show(`‚ùå Error fetching arrivals: ${error.message}`);\n}",
      "status": "[22]<br><span style=\"font-size:8px\">831ms<span></span></span>",
      "output": "\nüõ¨ Fetching arrival flights at VOBL... <br>‚úÖ Found 771 arrival flights <br>\nüìã Sample arrivals: <br>   1. BAW119   (405bfd) <br>      Arrived: 6/12/2025, 4:29:22 AM <br>      From: EGLL <br>   2. GFA282   (8940d3) <br>      Arrived: 6/12/2025, 4:21:46 AM <br>      From: Unknown <br>   3. AIC2812  (801657) <br>      Arrived: 6/12/2025, 4:18:35 AM <br>      From: VAJJ <br>",
      "type": "code"
    },
    {
      "code": "### Step 6: Match Flights Between Departure and Arrival",
      "status": "",
      "output": "<h3>Step 6: Match Flights Between Departure and Arrival</h3>\n",
      "type": "html"
    },
    {
      "code": "// Match flights that departed from source and arrived at destination\nwindow.candidateFlights = [];\nwindow.matchingFlights = [];\n\nscrib.show(\"\\nüîó Matching departure and arrival records...\");\n\n// First pass: collect all potential matches\nfor (const depFlight of window.departureFlights) {\n    // Skip if departure airport doesn't match our search departure airport  \n    if (depFlight.estDepartureAirport && depFlight.estDepartureAirport !== window.searchParams.departureAirport) {\n        continue;\n    }\n    \n    // Skip if departure has a specific arrival airport that doesn't match our search\n    if (depFlight.estArrivalAirport && depFlight.estArrivalAirport !== window.searchParams.arrivalAirport) {\n        continue;\n    }\n\n    // Find matching arrival with basic validation\n    const matchingArrival = window.arrivalFlights.find(arrFlight => {\n        // Basic matching criteria\n        if (arrFlight.icao24 !== depFlight.icao24 || arrFlight.lastSeen <= depFlight.firstSeen) {\n            return false;\n        }\n        \n        // Calculate flight duration in hours\n        const flightDurationHours = (arrFlight.lastSeen - depFlight.firstSeen) / 3600;\n        \n        // Filter out obviously unrealistic durations\n        if (flightDurationHours > 24 || flightDurationHours < 0.5) {\n            return false;\n        }\n        \n        // Check airport codes if available, otherwise allow for missing data\n        const depAirportMatch = !arrFlight.estDepartureAirport || \n                               arrFlight.estDepartureAirport === window.searchParams.departureAirport;\n        const arrAirportMatch = !arrFlight.estArrivalAirport || \n                               arrFlight.estArrivalAirport === window.searchParams.arrivalAirport;\n        \n        return depAirportMatch && arrAirportMatch;\n    });\n\n    if (matchingArrival) {\n        const flightDuration = matchingArrival.lastSeen - depFlight.firstSeen;\n        \n        window.candidateFlights.push({\n            icao24: depFlight.icao24,\n            callsign: depFlight.callsign || 'N/A',\n            departureTime: depFlight.firstSeen,\n            departureAirport: depFlight.estDepartureAirport || window.searchParams.departureAirport,\n            arrivalTime: matchingArrival.lastSeen,\n            arrivalAirport: matchingArrival.estArrivalAirport || window.searchParams.arrivalAirport,\n            flightDuration: flightDuration,\n            durationHours: flightDuration / 3600\n        });\n    }\n}\n\nscrib.show(`\\nüìã Found ${window.candidateFlights.length} candidate flights`);\n\n// Second pass: filter by shortest duration + buffer\nif (window.candidateFlights.length > 0) {\n    // Find the shortest flight duration\n    const shortestDuration = Math.min(...window.candidateFlights.map(f => f.durationHours));\n    const bufferHours = Math.max(2, shortestDuration * 0.5); // 2 hour buffer or 50% of shortest, whichever is larger\n    const maxAllowedDuration = shortestDuration + bufferHours;\n    \n    scrib.show(`   ‚Ä¢ Shortest flight: ${shortestDuration.toFixed(1)} hours`);\n    scrib.show(`   ‚Ä¢ Buffer: ${bufferHours.toFixed(1)} hours`);\n    scrib.show(`   ‚Ä¢ Maximum allowed: ${maxAllowedDuration.toFixed(1)} hours`);\n    \n    // Filter flights within reasonable duration\n    window.matchingFlights = window.candidateFlights.filter(f => f.durationHours <= maxAllowedDuration);\n}\n\nscrib.show(`\\n‚úàÔ∏è Found ${window.matchingFlights.length} realistic matching flights`);\n\n// Display matching flights\nif (window.matchingFlights.length > 0) {\n    scrib.show(\"\\nüìä Flight Details (Top 5) :\");\n    window.matchingFlights.slice(0,5).forEach((f, i) => {\n        const depTime = new Date(f.departureTime * 1000).toLocaleString();\n        const arrTime = new Date(f.arrivalTime * 1000).toLocaleString();\n        const durationHours = Math.floor(f.flightDuration / 3600);\n        const durationMinutes = Math.floor((f.flightDuration % 3600) / 60);\n        \n        scrib.show(`\\n${i+1}. Flight ${f.callsign} (${f.icao24})`);\n        scrib.show(`   Departure: ${f.departureAirport} at ${depTime}`);\n        scrib.show(`   Arrival: ${f.arrivalAirport} at ${arrTime}`);\n        scrib.show(`   Duration: ${durationHours}h ${durationMinutes}m`);\n    });\n} else {\n    scrib.show(\"No realistic direct flights found between these airports in the selected period.\");\n}",
      "status": "[23]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "\nüîó Matching departure and arrival records... <br>\nüìã Found 70 candidate flights <br>   ‚Ä¢ Shortest flight: 1.2 hours <br>   ‚Ä¢ Buffer: 2.0 hours <br>   ‚Ä¢ Maximum allowed: 3.2 hours <br>\n‚úàÔ∏è Found 29 realistic matching flights <br>\nüìä Flight Details (Top 5) : <br>\n1. Flight AKJ153W  (801508) <br>   Departure: VABB at 6/12/2025, 2:27:49 AM <br>   Arrival: VOBL at 6/12/2025, 3:39:53 AM <br>   Duration: 1h 12m <br>\n2. Flight AKJ173H  (8016a1) <br>   Departure: VABB at 6/12/2025, 12:42:04 AM <br>   Arrival: VOBL at 6/12/2025, 1:56:31 AM <br>   Duration: 1h 14m <br>\n3. Flight AIC2857  (800bef) <br>   Departure: VABB at 6/12/2025, 12:30:47 AM <br>   Arrival: VOBL at 6/12/2025, 1:48:22 AM <br>   Duration: 1h 17m <br>\n4. Flight IGO5322  (80172c) <br>   Departure: VABB at 6/12/2025, 12:18:40 AM <br>   Arrival: VOBL at 6/12/2025, 1:40:07 AM <br>   Duration: 1h 21m <br>\n5. Flight IGO5388  (801788) <br>   Departure: VABB at 6/11/2025, 11:00:38 PM <br>   Arrival: VOBL at 6/12/2025, 12:15:30 AM <br>   Duration: 1h 14m <br>",
      "type": "code"
    },
    {
      "code": "### Step 7: Fetch Flight Track Data (Optional)",
      "status": "",
      "output": "<h3>Step 7: Fetch Flight Track Data (Optional)</h3>\n",
      "type": "html"
    },
    {
      "code": "// Function to fetch track data for a specific flight\nwindow.fetchFlightTrack = async function(icao24, flightTime) {\n    const trackApiUrl = `https://opensky-network.org/api/tracks/all?icao24=${icao24}&time=${flightTime}`;\n    \n    try {\n        const response = await fetch(trackApiUrl);\n        \n        if (response.status === 404) {\n            return { error: 'No track data found (might be too old or unavailable)' };\n        }\n        \n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n        \n        const trackData = await response.json();\n        \n        if (!trackData || !trackData.path || trackData.path.length === 0) {\n            return { error: 'No track path data available' };\n        }\n        \n        return trackData;\n    } catch (error) {\n        return { error: error.message };\n    }\n}\n\n// Fetch track for the first matching flight (if any)\nif (window.matchingFlights && window.matchingFlights.length > 0) {\n    const firstFlight = window.matchingFlights[0];\n    scrib.show(`\\nüõ§Ô∏è Fetching track data for flight ${firstFlight.callsign}...`);\n    \n    const trackData = await window.fetchFlightTrack(firstFlight.icao24, firstFlight.departureTime);\n    \n    if (trackData.error) {\n        scrib.show(`‚ö†Ô∏è Track error: ${trackData.error}`);\n    } else {\n        window.trackData = trackData; // Store for later use\n        scrib.show(`‚úÖ Track data loaded successfully!`);\n        scrib.show(`   ‚Ä¢ Flight: ${trackData.callsign || firstFlight.callsign}`);\n        scrib.show(`   ‚Ä¢ ICAO24: ${trackData.icao24}`);\n        scrib.show(`   ‚Ä¢ Waypoints: ${trackData.path.length}`);\n        \n        // Show first few waypoints\n        scrib.show(\"\\nüìç First 5 waypoints:\");\n        trackData.path.slice(0, 5).forEach((wp, i) => {\n            const time = new Date(wp[0] * 1000).toLocaleTimeString();\n            const lat = wp[1]?.toFixed(4) || 'N/A';\n            const lon = wp[2]?.toFixed(4) || 'N/A';\n            const alt = wp[3] ? `${wp[3]}m` : 'N/A';\n            scrib.show(`   ${i+1}. ${time} - Lat: ${lat}, Lon: ${lon}, Alt: ${alt}`);\n        });\n    }\n} else {\n    scrib.show(\"\\n‚ö†Ô∏è No matching flights to fetch track data for.\");\n}",
      "status": "[24]<br><span style=\"font-size:8px\">1.439s<span></span></span>",
      "output": "\nüõ§Ô∏è Fetching track data for flight AKJ153W ... <br>‚úÖ Track data loaded successfully! <br>   ‚Ä¢ Flight: AKJ153W  <br>   ‚Ä¢ ICAO24: 801508 <br>   ‚Ä¢ Waypoints: 174 <br>\nüìç First 5 waypoints: <br>   1. 2:27:49 AM - Lat: 19.0888, Lon: 72.8743, Alt: N/A <br>   2. 2:29:03 AM - Lat: 19.0877, Lon: 72.8169, Alt: 304m <br>   3. 2:29:12 AM - Lat: 19.0877, Lon: 72.8071, Alt: 609m <br>   4. 2:29:42 AM - Lat: 19.0877, Lon: 72.7745, Alt: 914m <br>   5. 2:29:47 AM - Lat: 19.0876, Lon: 72.7687, Alt: 914m <br>",
      "type": "code"
    },
    {
      "code": "### Step 8: Data Analysis and Statistics",
      "status": "",
      "output": "<h3>Step 8: Data Analysis and Statistics</h3>\n",
      "type": "html"
    },
    {
      "code": "// Analyze flight data and create visualizations\nif (window.matchingFlights && window.matchingFlights.length > 0) {\n    // Calculate statistics\n    const durations = window.matchingFlights.map(f => f.flightDuration / 3600); // in hours\n    const avgDuration = durations.reduce((a, b) => a + b, 0) / durations.length;\n    const minDuration = Math.min(...durations);\n    const maxDuration = Math.max(...durations);\n    \n    scrib.show(\"\\nüìä Flight Statistics:\");\n    scrib.show(`   ‚Ä¢ Total flights: ${window.matchingFlights.length}`);\n    scrib.show(`   ‚Ä¢ Route: ${window.searchParams.departureAirport} ‚Üí ${window.searchParams.arrivalAirport}`);\n    scrib.show(`   ‚Ä¢ Average duration: ${avgDuration.toFixed(1)} hours`);\n    scrib.show(`   ‚Ä¢ Shortest flight: ${minDuration.toFixed(1)} hours`);\n    scrib.show(`   ‚Ä¢ Longest flight: ${maxDuration.toFixed(1)} hours`);\n    \n    // Callsign analysis\n    const callsigns = window.matchingFlights.map(f => f.callsign).filter(c => c !== 'N/A');\n    const uniqueCallsigns = [...new Set(callsigns)];\n    \n    scrib.show(`\\n‚úàÔ∏è Airlines/Callsigns: ${uniqueCallsigns.join(', ')}`);\n    \n    // Create a simple bar chart of flight durations\n    if (durations.length > 1) {\n        scrib.show(\"\\nüìà Flight Duration Distribution:\");\n        const maxBarLength = 30;\n        window.matchingFlights.forEach((f, i) => {\n            const duration = f.flightDuration / 3600;\n            const barLength = Math.round((duration / maxDuration) * maxBarLength);\n            const bar = '‚ñà'.repeat(barLength);\n            scrib.show(`   ${f.callsign}: ${bar} ${duration.toFixed(1)}h`);\n        });\n    }\n} else {\n    scrib.show(\"\\nüìä No flight data available for analysis.\");\n}",
      "status": "[25]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "\nüìä Flight Statistics: <br>   ‚Ä¢ Total flights: 29 <br>   ‚Ä¢ Route: VABB ‚Üí VOBL <br>   ‚Ä¢ Average duration: 1.3 hours <br>   ‚Ä¢ Shortest flight: 1.2 hours <br>   ‚Ä¢ Longest flight: 1.8 hours <br>\n‚úàÔ∏è Airlines/Callsigns: AKJ153W , AKJ173H , AIC2857 , IGO5322 , IGO5388 , AKJ136G , IGO274L , AKJ119E , AIC2641 , AIC2849 , AIC2607 , IGO914J , AIC2632 , AIC2863 , AIC2603 , AIC2845 , BDA803  , AIC2812 , AIC2401 , AIC2865 , AIC2853 , AKJ154C  <br>\nüìà Flight Duration Distribution: <br>   AKJ153W : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.2h <br>   AKJ173H : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.2h <br>   AIC2857 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   IGO5322 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.4h <br>   IGO5388 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.2h <br>   AKJ136G : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   IGO274L : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.5h <br>   AKJ119E : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.4h <br>   AIC2641 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.4h <br>   AIC2849 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.4h <br>   AIC2607 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.4h <br>   IGO914J : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2632 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2863 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2603 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2845 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   BDA803  : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2812 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.2h <br>   AKJ136G : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.6h <br>   AIC2401 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.8h <br>   AIC2865 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2641 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2849 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2853 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   IGO914J : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2632 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2863 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AKJ154C : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>   AIC2845 : ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 1.3h <br>",
      "type": "code"
    },
    {
      "code": "## Summary\n\nThis notebook demonstrated the complete flight tracking data processing workflow:\n\n1. **Airport Data**: Loaded ${window.airports ? window.airports.length : 0} airports from CSV\n2. **Flight Search**: Queried OpenSky Network API for historical data\n3. **Data Matching**: Matched departure and arrival records\n4. **Track Retrieval**: Fetched detailed waypoint data for flights\n5. **Analysis**: Calculated statistics and visualized flight patterns\n\n### Key Insights:\n- OpenSky Network provides free access to historical flight data\n- Data is available for previous days only (not real-time)\n- Track data may be limited or unavailable for older flights\n- The API allows comprehensive analysis of flight patterns and routes\n- Flight matching requires careful validation of departure and arrival records\n\n### Next Steps:\n- Try different airport pairs and date ranges\n- Analyze seasonal flight patterns\n- Compare flight durations across different times\n- Add map visualization using external tools\n- Explore altitude and speed data from waypoints\n\n### Variables Available:\nAll data is stored in window object for access across cells:\n- `window.airports` - Array of all airports\n- `window.searchParams` - Search parameters\n- `window.departureFlights` - Departure flight data\n- `window.arrivalFlights` - Arrival flight data  \n- `window.matchingFlights` - Matched flights\n- `window.trackData` - Track data for selected flight",
      "status": "",
      "output": "<h2>Summary</h2>\n<p>This notebook demonstrated the complete flight tracking data processing workflow:</p>\n<ol>\n<li><strong>Airport Data</strong>: Loaded ${window.airports ? window.airports.length : 0} airports from CSV</li>\n<li><strong>Flight Search</strong>: Queried OpenSky Network API for historical data</li>\n<li><strong>Data Matching</strong>: Matched departure and arrival records</li>\n<li><strong>Track Retrieval</strong>: Fetched detailed waypoint data for flights</li>\n<li><strong>Analysis</strong>: Calculated statistics and visualized flight patterns</li>\n</ol>\n<h3>Key Insights:</h3>\n<ul>\n<li>OpenSky Network provides free access to historical flight data</li>\n<li>Data is available for previous days only (not real-time)</li>\n<li>Track data may be limited or unavailable for older flights</li>\n<li>The API allows comprehensive analysis of flight patterns and routes</li>\n<li>Flight matching requires careful validation of departure and arrival records</li>\n</ul>\n<h3>Next Steps:</h3>\n<ul>\n<li>Try different airport pairs and date ranges</li>\n<li>Analyze seasonal flight patterns</li>\n<li>Compare flight durations across different times</li>\n<li>Add map visualization using external tools</li>\n<li>Explore altitude and speed data from waypoints</li>\n</ul>\n<h3>Variables Available:</h3>\n<p>All data is stored in window object for access across cells:</p>\n<ul>\n<li><code>window.airports</code> - Array of all airports</li>\n<li><code>window.searchParams</code> - Search parameters</li>\n<li><code>window.departureFlights</code> - Departure flight data</li>\n<li><code>window.arrivalFlights</code> - Arrival flight data  </li>\n<li><code>window.matchingFlights</code> - Matched flights</li>\n<li><code>window.trackData</code> - Track data for selected flight</li>\n</ul>\n",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}