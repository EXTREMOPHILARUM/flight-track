{
  "cells": [
    {
      "cell_type": "html",
      "source": [
        "<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" integrity=\"sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=\" crossorigin=\"\" />\n",
        "<script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\" integrity=\"sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=\" crossorigin=\"\"></script>"
      ]
    },
    {
      "cell_type": "css",
      "source": [
        "body {\n",
        "    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n",
        "    line-height: 1.6;\n",
        "    margin: 0;\n",
        "    padding: 20px;\n",
        "    background-color: #f4f7f6;\n",
        "    color: #333;\n",
        "}\n",
        "\n",
        ".container {\n",
        "    max-width: 800px;\n",
        "    margin: 0 auto;\n",
        "    background-color: #fff;\n",
        "    padding: 25px;\n",
        "    border-radius: 8px;\n",
        "    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n",
        "}\n",
        "\n",
        "h1 {\n",
        "    color: #2c3e50;\n",
        "    text-align: center;\n",
        "    margin-bottom: 20px;\n",
        "}\n",
        "\n",
        ".input-group {\n",
        "    display: flex;\n",
        "    margin-bottom: 20px;\n",
        "}\n",
        "\n",
        "\n",
        "/* New styles for input grid */\n",
        "\n",
        ".input-grid {\n",
        "    display: grid;\n",
        "    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n",
        "    gap: 15px;\n",
        "    margin-bottom: 20px;\n",
        "}\n",
        "\n",
        ".input-grid label {\n",
        "    display: block;\n",
        "    margin-bottom: 5px;\n",
        "    font-weight: bold;\n",
        "    font-size: 0.9rem;\n",
        "    color: #555;\n",
        "}\n",
        "\n",
        ".input-grid input[type=\"text\"],\n",
        ".input-grid input[type=\"date\"] {\n",
        "    width: 100%;\n",
        "    padding: 10px;\n",
        "    border: 1px solid #ddd;\n",
        "    border-radius: 4px;\n",
        "    box-sizing: border-box;\n",
        "    /* Ensures padding doesn't affect overall width */\n",
        "    font-size: 0.95rem;\n",
        "}\n",
        "\n",
        "#callsignInput {\n",
        "    flex-grow: 1;\n",
        "    padding: 10px;\n",
        "    border: 1px solid #ddd;\n",
        "    border-radius: 4px 0 0 4px;\n",
        "    font-size: 1rem;\n",
        "}\n",
        "\n",
        "#fetchTrackButton {\n",
        "    padding: 10px 15px;\n",
        "    background-color: #3498db;\n",
        "    color: white;\n",
        "    border: none;\n",
        "    border-radius: 0 4px 4px 0;\n",
        "    cursor: pointer;\n",
        "    font-size: 1rem;\n",
        "    transition: background-color 0.3s ease;\n",
        "}\n",
        "\n",
        "#fetchTrackButton:hover {\n",
        "    background-color: #2980b9;\n",
        "}\n",
        "\n",
        "\n",
        "/* Style for the new Fetch Flights button */\n",
        "\n",
        "#fetchFlightsButton {\n",
        "    display: block;\n",
        "    width: 100%;\n",
        "    padding: 12px 15px;\n",
        "    background-color: #27ae60;\n",
        "    /* A green color */\n",
        "    color: white;\n",
        "    border: none;\n",
        "    border-radius: 4px;\n",
        "    cursor: pointer;\n",
        "    font-size: 1.05rem;\n",
        "    transition: background-color 0.3s ease;\n",
        "    margin-bottom: 20px;\n",
        "}\n",
        "\n",
        "#fetchFlightsButton:hover {\n",
        "    background-color: #229954;\n",
        "}\n",
        "\n",
        "#messageArea {\n",
        "    margin-bottom: 15px;\n",
        "    padding: 10px;\n",
        "    border-radius: 4px;\n",
        "    text-align: center;\n",
        "    border: 1px solid #d6d8db;\n",
        "}\n",
        "\n",
        ".message-error {\n",
        "    background-color: #f8d7da;\n",
        "    color: #721c24;\n",
        "    border: 1px solid #f5c6cb;\n",
        "}\n",
        "\n",
        ".message-success {\n",
        "    background-color: #d4edda;\n",
        "    color: #155724;\n",
        "    border: 1px solid #c3e6cb;\n",
        "}\n",
        "\n",
        ".message-info {\n",
        "    background-color: #e2e3e5;\n",
        "    color: #383d41;\n",
        "    border: 1px solid #d6d8db;\n",
        "}\n",
        "\n",
        "#flightInfo,\n",
        "#waypointsArea {\n",
        "    margin-top: 20px;\n",
        "    padding: 15px;\n",
        "    background-color: #f9f9f9;\n",
        "    border: 1px solid #eee;\n",
        "    border-radius: 4px;\n",
        "}\n",
        "\n",
        "#flightInfo h2,\n",
        "#waypointsArea h2 {\n",
        "    margin-top: 0;\n",
        "    color: #34495e;\n",
        "    border-bottom: 1px solid #eaeaea;\n",
        "    padding-bottom: 10px;\n",
        "    margin-bottom: 10px;\n",
        "}\n",
        "\n",
        "#waypointsList {\n",
        "    list-style-type: none;\n",
        "    padding-left: 0;\n",
        "}\n",
        "\n",
        "#waypointsList li {\n",
        "    padding: 8px 0;\n",
        "    border-bottom: 1px dashed #eee;\n",
        "    font-size: 0.9rem;\n",
        "}\n",
        "\n",
        "#waypointsList li:last-child {\n",
        "    border-bottom: none;\n",
        "}\n",
        "\n",
        "\n",
        "/* Styles for the found flights list */\n",
        "\n",
        "#foundFlightsArea {\n",
        "    margin-top: 20px;\n",
        "    padding: 15px;\n",
        "    background-color: #f9f9f9;\n",
        "    border: 1px solid #eee;\n",
        "    border-radius: 4px;\n",
        "}\n",
        "\n",
        "#foundFlightsArea h2 {\n",
        "    margin-top: 0;\n",
        "    color: #34495e;\n",
        "    border-bottom: 1px solid #eaeaea;\n",
        "    padding-bottom: 10px;\n",
        "    margin-bottom: 10px;\n",
        "}\n",
        "\n",
        "#foundFlightsList {\n",
        "    list-style-type: none;\n",
        "    padding-left: 0;\n",
        "}\n",
        "\n",
        "#foundFlightsList li {\n",
        "    padding: 10px;\n",
        "    border-bottom: 1px dashed #eee;\n",
        "    display: flex;\n",
        "    justify-content: space-between;\n",
        "    align-items: center;\n",
        "    font-size: 0.9rem;\n",
        "}\n",
        "\n",
        "#foundFlightsList li:last-child {\n",
        "    border-bottom: none;\n",
        "}\n",
        "\n",
        "#foundFlightsList button {\n",
        "    padding: 5px 10px;\n",
        "    background-color: #3498db;\n",
        "    color: white;\n",
        "    border: none;\n",
        "    border-radius: 4px;\n",
        "    cursor: pointer;\n",
        "    font-size: 0.85rem;\n",
        "    transition: background-color 0.3s ease;\n",
        "}\n",
        "\n",
        "#foundFlightsList button:hover {\n",
        "    background-color: #2980b9;\n",
        "}\n",
        "\n",
        "\n",
        "/* Responsive adjustments */\n",
        "\n",
        "@media (max-width: 600px) {\n",
        "    .input-group {\n",
        "        flex-direction: column;\n",
        "    }\n",
        "    #callsignInput {\n",
        "        border-radius: 4px;\n",
        "        margin-bottom: 10px;\n",
        "    }\n",
        "    #fetchTrackButton {\n",
        "        border-radius: 4px;\n",
        "        width: 100%;\n",
        "    }\n",
        "    /* Adjust input grid for smaller screens */\n",
        "    .input-grid {\n",
        "        grid-template-columns: 1fr;\n",
        "        /* Stack inputs vertically */\n",
        "    }\n",
        "    #fetchFlightsButton {\n",
        "        font-size: 1rem;\n",
        "    }\n",
        "    #foundFlightsList li {\n",
        "        flex-direction: column;\n",
        "        align-items: flex-start;\n",
        "    }\n",
        "    #foundFlightsList button {\n",
        "        margin-top: 8px;\n",
        "        width: 100%;\n",
        "    }\n",
        "    body {\n",
        "        padding: 10px;\n",
        "    }\n",
        "    .container {\n",
        "        padding: 15px;\n",
        "    }\n",
        "}"
      ]
    },
    {
      "cell_type": "html",
      "source": [
        "<div class=\"container\">\n",
        "    <h1>Flight Tracker</h1>\n",
        "    <p>Enter departure and arrival airport ICAOs, and a date range (max 7 days) to find flights.<br> Note: Data is available for previous days only.</p>\n",
        "\n",
        "    <div class=\"input-grid\">\n",
        "        <div>\n",
        "            <label for=\"departureAirportInput\">Departure Airport (ICAO):</label>\n",
        "            <input type=\"text\" id=\"departureAirportInput\" placeholder=\"e.g., EDDF\">\n",
        "        </div>\n",
        "        <div>\n",
        "            <label for=\"arrivalAirportInput\">Arrival Airport (ICAO):</label>\n",
        "            <input type=\"text\" id=\"arrivalAirportInput\" placeholder=\"e.g., KJFK\">\n",
        "        </div>\n",
        "        <div>\n",
        "            <label for=\"beginDateInput\">Begin Date:</label>\n",
        "            <input type=\"date\" id=\"beginDateInput\">\n",
        "        </div>\n",
        "        <div>\n",
        "            <label for=\"endDateInput\">End Date:</label>\n",
        "            <input type=\"date\" id=\"endDateInput\">\n",
        "        </div>\n",
        "    </div>\n",
        "    <button id=\"fetchFlightsButton\">Fetch Flights</button>\n",
        "\n",
        "    <div id=\"messageArea\"></div>\n",
        "\n",
        "    <div id=\"foundFlightsArea\">\n",
        "        <h2>Flight Results</h2>\n",
        "        <ul id=\"foundFlightsList\">\n",
        "            \n",
        "        </ul>\n",
        "    </div>\n",
        "\n",
        "    <div id=\"flightTrackMapContainer\" style=\"height: 400px; margin-top: 20px; display:none;\"></div>\n",
        "\n",
        "    <div id=\"flightInfo\" style=\"display:none;\">\n",
        "        <h2>Flight Track Details</h2>\n",
        "        <p><strong>ICAO24:</strong> <span id=\"infoIcao24\">-</span></p>\n",
        "        <p><strong>Callsign:</strong> <span id=\"infoCallsign\">-</span></p>\n",
        "        <p><strong>Start Time:</strong> <span id=\"infoStartTime\">-</span></p>\n",
        "        <p><strong>End Time:</strong> <span id=\"infoEndTime\">-</span></p>\n",
        "    </div>\n",
        "\n",
        "    <div id=\"waypointsArea\" style=\"display:none;\">\n",
        "        <h2>Waypoints</h2>\n",
        "        <ul id=\"waypointsList\">\n",
        "            \n",
        "        </ul>\n",
        "    </div>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "javascript",
      "source": [
        "document.addEventListener('DOMContentLoaded', () => {\n",
        "    // Input fields\n",
        "    const departureAirportInput = document.getElementById('departureAirportInput');\n",
        "    const arrivalAirportInput = document.getElementById('arrivalAirportInput');\n",
        "    const beginDateInput = document.getElementById('beginDateInput');\n",
        "    const endDateInput = document.getElementById('endDateInput');\n",
        "    const fetchFlightsButton = document.getElementById('fetchFlightsButton');\n",
        "\n",
        "    // Display areas\n",
        "    const messageArea = document.getElementById('messageArea');\n",
        "    const foundFlightsList = document.getElementById('foundFlightsList');\n",
        "    const flightInfoDiv = document.getElementById('flightInfo');\n",
        "    const waypointsList = document.getElementById('waypointsList');\n",
        "    const waypointsAreaDiv = document.getElementById('waypointsArea');\n",
        "\n",
        "    // Flight details spans\n",
        "    const infoIcao24 = document.getElementById('infoIcao24');\n",
        "    const infoCallsign = document.getElementById('infoCallsign');\n",
        "    const infoStartTime = document.getElementById('infoStartTime');\n",
        "    const infoEndTime = document.getElementById('infoEndTime');\n",
        "\n",
        "    // Map related\n",
        "    const flightTrackMapContainer = document.getElementById('flightTrackMapContainer');\n",
        "    let map; // Leaflet map instance\n",
        "    let currentTrackPolyline = null;\n",
        "    let startMarker = null;\n",
        "    let endMarker = null;\n",
        "\n",
        "    // Datalists for airport inputs\n",
        "    const departureAirportDatalist = document.createElement('datalist');\n",
        "    departureAirportDatalist.id = 'departureAirportOptions';\n",
        "    departureAirportInput.setAttribute('list', 'departureAirportOptions');\n",
        "    document.body.appendChild(departureAirportDatalist);\n",
        "\n",
        "    const arrivalAirportDatalist = document.createElement('datalist');\n",
        "    arrivalAirportDatalist.id = 'arrivalAirportOptions';\n",
        "    arrivalAirportInput.setAttribute('list', 'arrivalAirportOptions');\n",
        "    document.body.appendChild(arrivalAirportDatalist);\n",
        "\n",
        "    fetchFlightsButton.addEventListener('click', fetchAndDisplayMatchingFlights);\n",
        "\n",
        "    // Fetch and populate airport data on load\n",
        "    fetchAndPopulateAirportData();\n",
        "\n",
        "    function displayMessage(message, type = 'info') {\n",
        "        messageArea.textContent = message;\n",
        "        messageArea.className = 'message-' + type;\n",
        "        messageArea.style.display = 'block';\n",
        "    }\n",
        "\n",
        "    function clearMessages() {\n",
        "        messageArea.textContent = '';\n",
        "        messageArea.className = '';\n",
        "        messageArea.style.display = 'none';\n",
        "    }\n",
        "\n",
        "    function clearFlightResults() {\n",
        "        foundFlightsList.innerHTML = '';\n",
        "        flightInfoDiv.style.display = 'none';\n",
        "        waypointsAreaDiv.style.display = 'none';\n",
        "        flightTrackMapContainer.style.display = 'none'; // Hide map container\n",
        "        if (map && currentTrackPolyline) {\n",
        "            map.removeLayer(currentTrackPolyline);\n",
        "            currentTrackPolyline = null;\n",
        "        }\n",
        "        if (map && startMarker) {\n",
        "            map.removeLayer(startMarker);\n",
        "            startMarker = null;\n",
        "        }\n",
        "        if (map && endMarker) {\n",
        "            map.removeLayer(endMarker);\n",
        "            endMarker = null;\n",
        "        }\n",
        "\n",
        "        infoIcao24.textContent = '-';\n",
        "        infoCallsign.textContent = '-';\n",
        "        infoStartTime.textContent = '-';\n",
        "        infoEndTime.textContent = '-';\n",
        "        waypointsList.innerHTML = '';\n",
        "    }\n",
        "\n",
        "    async function fetchAndPopulateAirportData() {\n",
        "        const csvUrl = 'https://raw.githubusercontent.com/ip2location/ip2location-iata-icao/refs/heads/master/iata-icao.csv';\n",
        "        try {\n",
        "            const response = await fetch(csvUrl);\n",
        "            if (!response.ok) {\n",
        "                throw new Error(`Failed to fetch airport data: ${response.status}`);\n",
        "            }\n",
        "            const csvText = await response.text();\n",
        "            const airports = parseAirportCsv(csvText);\n",
        "            populateDatalists(airports);\n",
        "        } catch (error) {\n",
        "            console.error('Error fetching or parsing airport data:', error);\n",
        "            displayMessage('Could not load airport suggestions.', 'error');\n",
        "        }\n",
        "    }\n",
        "\n",
        "    function parseAirportCsv(csvText) {\n",
        "        const lines = csvText.split('\\n');\n",
        "        const airports = [];\n",
        "        // Skip header line by starting i from 1\n",
        "        for (let i = 1; i < lines.length; i++) {\n",
        "            const line = lines[i].trim();\n",
        "            if (!line) continue;\n",
        "\n",
        "            // \"country_code\",\"region_name\",\"iata\",\"icao\",\"airport\",\"latitude\",\"longitude\"\n",
        "            // Example: \"AE\",\"Abu Zaby\",\"AAN\",\"OMAL\",\"Al Ain International Airport\",\"24.2617\",\"55.6092\"\n",
        "            // We need to handle quoted fields that might contain commas.\n",
        "            const parts = [];\n",
        "            let currentPart = '';\n",
        "            let inQuotes = false;\n",
        "            for (let char of line) {\n",
        "                if (char === '\"') {\n",
        "                    inQuotes = !inQuotes;\n",
        "                } else if (char === ',' && !inQuotes) {\n",
        "                    parts.push(currentPart);\n",
        "                    currentPart = '';\n",
        "                } else {\n",
        "                    currentPart += char;\n",
        "                }\n",
        "            }\n",
        "            parts.push(currentPart); // Add the last part\n",
        "\n",
        "            if (parts.length >= 5) { // Ensure we have enough parts for country, region, icao, name\n",
        "                const countryCode = parts[0].trim();\n",
        "                const regionName = parts[1].trim(); // Region name is the 2nd column (index 1)\n",
        "                const icao = parts[3].trim();\n",
        "                const airportName = parts[4].trim();\n",
        "                if (icao && airportName && icao.toLowerCase() !== 'icao') { // Ensure it's a valid ICAO and not the header (case-insensitive check for header)\n",
        "                    airports.push({ icao, name: airportName, country: countryCode, region: regionName });\n",
        "                }\n",
        "            }\n",
        "        }\n",
        "        return airports;\n",
        "    }\n",
        "\n",
        "    function populateDatalists(airports) {\n",
        "        departureAirportDatalist.innerHTML = ''; // Clear existing options\n",
        "        arrivalAirportDatalist.innerHTML = ''; // Clear existing options\n",
        "\n",
        "        airports.forEach(airport => {\n",
        "            const option = document.createElement('option');\n",
        "            option.value = airport.icao;\n",
        "            // Display name, ICAO, region, and country. Handle cases where region might be empty.\n",
        "            const displayText = airport.region ?\n",
        "                `${airport.name} (${airport.icao}, ${airport.region}, ${airport.country})` :\n",
        "                `${airport.name} (${airport.icao}, ${airport.country})`;\n",
        "            option.textContent = displayText;\n",
        "\n",
        "            departureAirportDatalist.appendChild(option.cloneNode(true));\n",
        "            arrivalAirportDatalist.appendChild(option);\n",
        "        });\n",
        "    }\n",
        "\n",
        "    function initMap() {\n",
        "        if (!map) { // Initialize map only once\n",
        "            map = L.map('flightTrackMapContainer').setView([20, 0], 2); // Default view\n",
        "            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n",
        "                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n",
        "            }).addTo(map);\n",
        "        }\n",
        "    }\n",
        "\n",
        "    async function fetchAndDisplayMatchingFlights() {\n",
        "        clearMessages();\n",
        "        clearFlightResults();\n",
        "\n",
        "        const departureAirport = departureAirportInput.value.trim().toUpperCase();\n",
        "        const arrivalAirport = arrivalAirportInput.value.trim().toUpperCase();\n",
        "        const beginDateStr = beginDateInput.value;\n",
        "        const endDateStr = endDateInput.value;\n",
        "\n",
        "        if (!departureAirport || !arrivalAirport || !beginDateStr || !endDateStr) {\n",
        "            displayMessage('Please fill in all fields: Departure Airport, Arrival Airport, Begin Date, and End Date.', 'error');\n",
        "            return;\n",
        "        }\n",
        "\n",
        "        const beginTimestamp = Math.floor(new Date(beginDateStr + \"T00:00:00Z\").getTime() / 1000);\n",
        "        const endTimestamp = Math.floor(new Date(endDateStr + \"T23:59:59Z\").getTime() / 1000);\n",
        "\n",
        "        if (isNaN(beginTimestamp) || isNaN(endTimestamp)) {\n",
        "            displayMessage('Invalid date format.', 'error');\n",
        "            return;\n",
        "        }\n",
        "\n",
        "        if (beginTimestamp > endTimestamp) {\n",
        "            displayMessage('Begin Date must be before or same as End Date.', 'error');\n",
        "            return;\n",
        "        }\n",
        "\n",
        "        const sevenDaysInSeconds = 7 * 24 * 60 * 60;\n",
        "        if ((endTimestamp - beginTimestamp) > sevenDaysInSeconds) {\n",
        "            displayMessage('The date range cannot exceed 7 days.', 'error');\n",
        "            return;\n",
        "        }\n",
        "\n",
        "        // Check if dates are in the past or today (API gives previous day's data)\n",
        "        const today = new Date();\n",
        "        today.setHours(0, 0, 0, 0);\n",
        "        const beginDateObj = new Date(beginDateStr + \"T00:00:00Z\");\n",
        "\n",
        "        // API data is for previous days. If user selects today or future for beginDate, it might not yield results.\n",
        "        // For simplicity, we'll allow today, but API behavior for \"today\" is effectively \"yesterday's data at best\".\n",
        "        // Strict check: if (beginDateObj >= today)\n",
        "\n",
        "        displayMessage('Fetching flights... Note: Data is for previous days.', 'info');\n",
        "\n",
        "        try {\n",
        "            // Fetch departure flights\n",
        "            const departureApiUrl = `https://opensky-network.org/api/flights/departure?airport=${departureAirport}&begin=${beginTimestamp}&end=${endTimestamp}`;\n",
        "            const departureResponse = await fetch(departureApiUrl);\n",
        "\n",
        "            if (departureResponse.status === 404) {\n",
        "                displayMessage(`No departure flights found for ${departureAirport} in the given period.`, 'info');\n",
        "                return;\n",
        "            }\n",
        "            if (!departureResponse.ok) {\n",
        "                throw new Error(`Error fetching departure flights: ${departureResponse.status} ${departureResponse.statusText}`);\n",
        "            }\n",
        "\n",
        "            const departureFlights = await departureResponse.json();\n",
        "            if (!departureFlights || departureFlights.length === 0) {\n",
        "                displayMessage(`No departure flights found for ${departureAirport} in the given period.`, 'info');\n",
        "                return;\n",
        "            }\n",
        "\n",
        "            // Fetch arrival flights\n",
        "            const arrivalApiUrl = `https://opensky-network.org/api/flights/arrival?airport=${arrivalAirport}&begin=${beginTimestamp}&end=${endTimestamp}`;\n",
        "            const arrivalResponse = await fetch(arrivalApiUrl);\n",
        "\n",
        "            if (arrivalResponse.status === 404) {\n",
        "                displayMessage(`No arrival flights found for ${arrivalAirport} in the given period.`, 'info');\n",
        "                return;\n",
        "            }\n",
        "            if (!arrivalResponse.ok) {\n",
        "                throw new Error(`Error fetching arrival flights: ${arrivalResponse.status} ${arrivalResponse.statusText}`);\n",
        "            }\n",
        "\n",
        "            const arrivalFlights = await arrivalResponse.json();\n",
        "            if (!arrivalFlights || arrivalFlights.length === 0) {\n",
        "                displayMessage(`No arrival flights found for ${arrivalAirport} in the given period.`, 'info');\n",
        "                return;\n",
        "            }\n",
        "\n",
        "            const validatedMatchingFlights = [];\n",
        "            for (const depFlight of departureFlights) {\n",
        "                // If the departure record has a specific estimated arrival airport,\n",
        "                // and it's NOT the one the user is searching for, skip this departure record.\n",
        "                // This prevents linking a flight clearly going to VOBL (for example)\n",
        "                // with a search for VABB, just because the same plane later landed at VABB.\n",
        "                if (depFlight.estArrivalAirport && depFlight.estArrivalAirport !== arrivalAirport) {\n",
        "                    continue;\n",
        "                }\n",
        "\n",
        "                // Proceed to find a matching arrival for departures that are either:\n",
        "                // 1. Estimated to arrive at the target airport.\n",
        "                // 2. Have no estimated arrival airport in the departure record (null).\n",
        "                const matchingArrival = arrivalFlights.find(arrFlight =>\n",
        "                    arrFlight.icao24 === depFlight.icao24 &&\n",
        "                    arrFlight.estArrivalAirport === arrivalAirport && // Confirm arrival record is for the target\n",
        "                    arrFlight.lastSeen > depFlight.firstSeen // Ensure arrival is after departure\n",
        "                );\n",
        "\n",
        "                if (matchingArrival) {\n",
        "                    validatedMatchingFlights.push({\n",
        "                        icao24: depFlight.icao24,\n",
        "                        callsign: depFlight.callsign,\n",
        "                        firstSeen: depFlight.firstSeen,\n",
        "                        estDepartureAirport: depFlight.estDepartureAirport,\n",
        "                        lastSeen: matchingArrival.lastSeen, // Use arrival time from the matched arrival record\n",
        "                        estArrivalAirport: matchingArrival.estArrivalAirport, // Use arrival airport from matched (target) arrival record\n",
        "                    });\n",
        "                }\n",
        "            }\n",
        "\n",
        "            // Update the variable name for consistency downstream\n",
        "            const matchingFlights = validatedMatchingFlights;\n",
        "\n",
        "            if (matchingFlights.length === 0) {\n",
        "                displayMessage(`No flights found departing from ${departureAirport} and arriving at ${arrivalAirport} in the selected period.`, 'info');\n",
        "                return;\n",
        "            }\n",
        "\n",
        "            displayMessage(`Found ${matchingFlights.length} flight(s). Select one to view track.`, 'success');\n",
        "            foundFlightsList.innerHTML = ''; // Clear previous list\n",
        "\n",
        "            // Update the heading to show the route\n",
        "            document.querySelector('#foundFlightsArea h2').textContent = `Flights from ${departureAirport} to ${arrivalAirport}`;\n",
        "\n",
        "            matchingFlights.forEach(flight => {\n",
        "                const li = document.createElement('li');\n",
        "                const depTime = flight.firstSeen ? new Date(flight.firstSeen * 1000).toLocaleString() : 'N/A';\n",
        "                const arrTime = flight.lastSeen ? new Date(flight.lastSeen * 1000).toLocaleString() : 'N/A';\n",
        "\n",
        "                li.innerHTML = `\n",
        "                    <span>\n",
        "                        <strong>Callsign:</strong> ${flight.callsign || 'N/A'} (ICAO24: ${flight.icao24})<br>\n",
        "                        <strong>Departed:</strong> ${depTime} from ${flight.estDepartureAirport || 'N/A'}<br>\n",
        "                        <strong>Arrived:</strong> ${arrTime} at ${flight.estArrivalAirport || 'N/A'}\n",
        "                    </span>\n",
        "                `;\n",
        "\n",
        "                const button = document.createElement('button');\n",
        "                button.textContent = 'Show Track';\n",
        "                button.addEventListener('click', () => fetchAndDisplayTrack(flight.icao24, flight.firstSeen, flight.callsign));\n",
        "                li.appendChild(button);\n",
        "                foundFlightsList.appendChild(li);\n",
        "            });\n",
        "\n",
        "        } catch (error) {\n",
        "            console.error('Error fetching matching flights:', error);\n",
        "            displayMessage(`Error: ${error.message}`, 'error');\n",
        "        }\n",
        "    }\n",
        "\n",
        "    async function fetchAndDisplayTrack(icao24, flightTime, callsign) {\n",
        "        if (!icao24 || flightTime === undefined || flightTime === null) {\n",
        "            displayMessage('Missing ICAO24 or flight time for track fetching.', 'error');\n",
        "            return;\n",
        "        }\n",
        "\n",
        "        clearMessages();\n",
        "        // Clear previous track details but not the flight list\n",
        "        flightInfoDiv.style.display = 'none';\n",
        "        waypointsAreaDiv.style.display = 'none';\n",
        "        flightTrackMapContainer.style.display = 'none'; // Hide map initially\n",
        "        if (map && currentTrackPolyline) {\n",
        "            map.removeLayer(currentTrackPolyline);\n",
        "            currentTrackPolyline = null;\n",
        "        }\n",
        "        if (map && startMarker) {\n",
        "            map.removeLayer(startMarker);\n",
        "            startMarker = null;\n",
        "        }\n",
        "        if (map && endMarker) {\n",
        "            map.removeLayer(endMarker);\n",
        "            endMarker = null;\n",
        "        }\n",
        "\n",
        "        infoIcao24.textContent = '-';\n",
        "        infoCallsign.textContent = '-';\n",
        "        infoStartTime.textContent = '-';\n",
        "        infoEndTime.textContent = '-';\n",
        "        waypointsList.innerHTML = '';\n",
        "\n",
        "        displayMessage(`Fetching track for ${callsign || icao24}...`, 'info');\n",
        "\n",
        "        try {\n",
        "            // time for tracks/all can be any time within the flight\n",
        "            const trackApiUrl = `https://opensky-network.org/api/tracks/all?icao24=${icao24}&time=${flightTime}`;\n",
        "            const trackResponse = await fetch(trackApiUrl);\n",
        "\n",
        "            if (trackResponse.status === 404) {\n",
        "                displayMessage(`No track data found for ICAO24 ${icao24} around the specified time. Track data might be too old (older than 30 days) or not available.`, 'error');\n",
        "                flightInfoDiv.style.display = 'block';\n",
        "                flightTrackMapContainer.style.display = 'none'; // Keep map hidden\n",
        "                waypointsAreaDiv.style.display = 'none'; // Ensure waypoints list is hidden\n",
        "                infoIcao24.textContent = icao24;\n",
        "                return;\n",
        "            }\n",
        "            if (!trackResponse.ok) {\n",
        "                throw new Error(`Error fetching track: ${trackResponse.status} ${trackResponse.statusText}`);\n",
        "            }\n",
        "            const trackData = await trackResponse.json();\n",
        "\n",
        "            if (!trackData || !trackData.path || trackData.path.length === 0) {\n",
        "                displayMessage(`No track path data found for ICAO24 ${icao24}.`, 'error');\n",
        "                flightInfoDiv.style.display = 'block';\n",
        "                flightTrackMapContainer.style.display = 'none'; // Keep map hidden\n",
        "                waypointsAreaDiv.style.display = 'none'; // Ensure waypoints list is hidden\n",
        "                infoIcao24.textContent = trackData.icao24 || icao24;\n",
        "                return;\n",
        "            }\n",
        "\n",
        "            displayMessage('Track data loaded successfully!', 'success');\n",
        "            flightInfoDiv.style.display = 'block';\n",
        "            waypointsAreaDiv.style.display = 'none'; // Ensure waypoints list remains hidden\n",
        "            flightTrackMapContainer.style.display = 'block'; // Show map container\n",
        "\n",
        "            initMap(); // Initialize map if not already done\n",
        "\n",
        "            // Clear previous track and markers from map\n",
        "            if (currentTrackPolyline) {\n",
        "                map.removeLayer(currentTrackPolyline);\n",
        "            }\n",
        "            if (startMarker) {\n",
        "                map.removeLayer(startMarker);\n",
        "            }\n",
        "            if (endMarker) {\n",
        "                map.removeLayer(endMarker);\n",
        "            }\n",
        "\n",
        "            const latLngs = trackData.path\n",
        "                .filter(wp => wp[1] !== null && wp[2] !== null) // Ensure lat/lon are not null\n",
        "                .map(wp => [wp[1], wp[2]]); // Extract [lat, lon]\n",
        "\n",
        "            if (latLngs.length > 1) {\n",
        "                currentTrackPolyline = L.polyline(latLngs, { color: 'blue' }).addTo(map);\n",
        "                map.fitBounds(currentTrackPolyline.getBounds());\n",
        "\n",
        "                // Add start and end markers\n",
        "                startMarker = L.marker(latLngs[0]).addTo(map)\n",
        "                    .bindPopup(`<b>Start</b><br>Time: ${new Date(trackData.path[0][0] * 1000).toLocaleString()}<br>Lat: ${latLngs[0][0].toFixed(4)}, Lon: ${latLngs[0][1].toFixed(4)}`);\n",
        "                endMarker = L.marker(latLngs[latLngs.length - 1]).addTo(map)\n",
        "                    .bindPopup(`<b>End</b><br>Time: ${new Date(trackData.path[trackData.path.length -1][0] * 1000).toLocaleString()}<br>Lat: ${latLngs[latLngs.length - 1][0].toFixed(4)}, Lon: ${latLngs[latLngs.length - 1][1].toFixed(4)}`);\n",
        "\n",
        "            } else if (latLngs.length === 1) { // Single point, just show a marker\n",
        "                startMarker = L.marker(latLngs[0]).addTo(map)\n",
        "                    .bindPopup(`<b>Waypoint</b><br>Time: ${new Date(trackData.path[0][0] * 1000).toLocaleString()}<br>Lat: ${latLngs[0][0].toFixed(4)}, Lon: ${latLngs[0][1].toFixed(4)}`);\n",
        "                map.setView(latLngs[0], 10); // Zoom to the single point\n",
        "            } else {\n",
        "                displayMessage('Not enough valid waypoints to draw a track.', 'info');\n",
        "            }\n",
        "\n",
        "            infoIcao24.textContent = trackData.icao24;\n",
        "            infoCallsign.textContent = trackData.callsign || callsign || 'N/A';\n",
        "            infoStartTime.textContent = trackData.startTime ? new Date(trackData.startTime * 1000).toLocaleString() : 'N/A';\n",
        "            infoEndTime.textContent = trackData.endTime ? new Date(trackData.endTime * 1000).toLocaleString() : 'N/A (or ongoing)';\n",
        "\n",
        "            waypointsList.innerHTML = ''; // Clear previous waypoints\n",
        "            trackData.path.forEach(wp => {\n",
        "                const li = document.createElement('li');\n",
        "                const time = new Date(wp[0] * 1000).toLocaleTimeString();\n",
        "                const lat = wp[1] !== null ? wp[1].toFixed(4) : 'N/A';\n",
        "                const lon = wp[2] !== null ? wp[2].toFixed(4) : 'N/A';\n",
        "                const alt = wp[3] !== null ? `${wp[3].toFixed(0)}m` : 'N/A';\n",
        "                const trackVal = wp[4] !== null ? `${wp[4].toFixed(1)}°` : 'N/A';\n",
        "                const onGround = wp[5] ? 'Yes' : 'No';\n",
        "\n",
        "                li.textContent = `Time: ${time}, Lat: ${lat}, Lon: ${lon}, Alt: ${alt}, Track: ${trackVal}, On Ground: ${onGround}`;\n",
        "                waypointsList.appendChild(li);\n",
        "            });\n",
        "\n",
        "        } catch (error) {\n",
        "            console.error('Error fetching flight track:', error);\n",
        "            displayMessage(`Error fetching track: ${error.message}`, 'error');\n",
        "        }\n",
        "    }\n",
        "});"
      ]
    }
  ],
  "metadata": {
    "trusted": true
  },
  "notebook_id": "9a6b18a2-205b-4a7b-a496-03916965b7a0"
}
